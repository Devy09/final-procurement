datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RequestStatus {
  pending
  approved
  rejected
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OTHER INFO FIELDS
  department   String?
  section      String?
  title        String?
  designation  String?
  saino        String?
  alobsno      String?
  signatureUrl String? @db.Text

  purchaseRequests PurchaseRequest[]
  ppmpSubmissions  OfficeHeadPPMP[]
  notifications    Notification[]    @relation("UserNotifications")
  createdNotifications Notification[] @relation("NotificationCreator")
}

model PPMP {
  id            String   @id @default(uuid())
  ppmp_item     String
  unit_cost     Decimal  @db.Decimal(10, 2)
  ppmp_category String
  createdAt     DateTime @default(now())
}

model OfficeHeadPPMP {
  id            String   @id @default(uuid())
  ppmp_item     String
  unit_cost     Decimal  @db.Decimal(10, 2)
  ppmp_category String
  createdAt     DateTime @default(now())
  
  // Add user relation
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
}

model PurchaseRequest {
  id                String   @id @default(cuid())
  prno              String   @unique
  department        String
  section           String
  saino             String?
  alobsno           String?
  date              DateTime @default(now())
  purpose           String
  certificationFile String
  letterFile        String
  proposalFile      String
  overallTotal      Decimal  @db.Decimal(10, 2)
  procurementMode   String

  // Approval statuses
  status                 RequestStatus @default(pending)
  // Accountant Approval
  approvedByAccountant   Boolean       @default(false)
  accountantName         String?
  accountantRole         String?
  accountantTitle        String?
  accountantSignatureUrl String?       @db.Text
  accountantDesignation  String?
  // President Approval
  approvedByPresident    Boolean       @default(false)
  presidentName          String?
  presidentRole          String?
  presidentTitle         String?
  presidentSignatureUrl  String?       @db.Text
  presidentDesignation   String?
  // Approval dates
  approvedAtAccountant   DateTime?
  approvedAtPresident    DateTime?
  rejectedReason         String?

  // Relations
  createdBy   User                  @relation(fields: [createdById], references: [id])
  createdById String
  items       PurchaseRequestItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quotations Quotation[]
}

model PurchaseRequestItem {
  id          String  @id @default(cuid())
  itemNo      Int
  quantity    Int
  unit        String
  description String
  stockNo     String?
  unitCost    Decimal @db.Decimal(10, 2)
  totalCost   Decimal @db.Decimal(10, 2)

  // Relations
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  purchaseRequestId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseRequestSequence {
  id         String @id @default(cuid())
  year       Int    @unique
  lastNumber Int    @default(0)
}

model Quotation {
  id         String   @id @default(cuid())
  prno       String
  department String
  section    String
  date       DateTime @default(now())

  purchaseRequest PurchaseRequest @relation(fields: [prno], references: [prno])

  // Quotation items
  items QuotationItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuotationItem {
  id          String   @id @default(cuid())
  itemNo      Int
  quantity    Int
  unit        String
  description String
  unitCost    Decimal? @db.Decimal(10, 2)
  totalCost   Decimal? @db.Decimal(10, 2)

  // Relation to quotation
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplierQuotation {
  id           String                  @id @default(cuid())
  supplierName String
  prno         String
  date         DateTime
  items        SupplierQuotationItem[]
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

model SupplierQuotationItem {
  id                  String            @id @default(cuid())
  supplierQuotation   SupplierQuotation @relation(fields: [supplierQuotationId], references: [id], onDelete: Cascade)
  supplierQuotationId String
  itemNumber          String
  description         String
  quantity            Int
  unit                String
  unitCost            Float
  totalCost           Float
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([supplierQuotationId])
}

enum PurchaseOrderStatus {
  pending
  approved
  rejected
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  prno         String
  supplierName String
  totalAmount  Float
  date         DateTime
  status       PurchaseOrderStatus @default(pending)

  // Accountant Approval
  approvedByAccountant   Boolean   @default(false)
  accountantName         String?
  accountantRole         String?
  accountantTitle        String?
  accountantSignatureUrl String?   @db.Text
  accountantDesignation  String?
  approvedAtAccountant   DateTime?

  // President Approval
  approvedByPresident   Boolean   @default(false)
  presidentName         String?
  presidentRole         String?
  presidentTitle        String?
  presidentSignatureUrl String?   @db.Text
  presidentDesignation  String?
  approvedAtPresident   DateTime?

  rejectedReason String?
  items          PurchaseOrderItem[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([prno])
}

model PurchaseOrderItem {
  id            String        @id @default(cuid())
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id])
  poId          String
  itemNumber    String
  description   String
  quantity      Int
  unit          String
  unitCost      Float
  totalCost     Float

  @@index([poId])
}

model Report {
  id                      String   @id @default(uuid())
  period                  String
  totalSpend              Float
  purchaseRequestCount    Int
  officeQuotationsCount   Int
  supplierQuotationsCount Int
  createdAt               DateTime @default(now())
}

enum NotificationType {
  REQUEST
  UPDATE
  ALERT
}

model Notification {
  id        String          @id @default(cuid())
  message   String
  type      NotificationType
  section   String          // For section-based filtering
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  
  // Relations
  user      User            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  createdBy User            @relation("NotificationCreator", fields: [createdById], references: [id])
  createdById String

  @@index([userId])
  @@index([section])
  @@index([createdAt])
}
